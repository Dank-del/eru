name: Eru Release

on:
  release:
    types: [created]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            output_name: eru_linux
          - os: macos-latest
            output_name: eru_macos
          - os: windows-latest
            output_name: eru_windows.exe

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libcurl4-openssl-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install curl

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg install curl:x64-windows
        vcpkg integrate install

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config Release

    - name: Rename binary
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv ${{github.workspace}}/build/src/Release/eru.exe ${{github.workspace}}/${{ matrix.output_name }}
        else
          mv ${{github.workspace}}/build/src/eru ${{github.workspace}}/${{ matrix.output_name }}
        fi
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{github.workspace}}/${{ matrix.output_name }}
        asset_name: ${{ matrix.output_name }}
        asset_content_type: application/octet-stream
